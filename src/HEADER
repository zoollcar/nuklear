/// # Nuklear
/// ![](https://cloud.githubusercontent.com/assets/8057201/11761525/ae06f0ca-a0c6-11e5-819d-5610b25f6ef4.gif)
///
/// ## 目录
/// 1. 关于部分
/// 2. 亮点部分
/// 3. 特色部分
/// 4. 用法部分
///     1. 标志部分
///     2. 常亮部分
///     3. 依赖部分
/// 5. 示例部分
/// 6. API 部分
///     1. Context 上下文
///     2. Input 部分
///     3. Drawing 部分
///     4. Window 部分
///     5. Layouting 部分
///     6. Groups 部分
///     7. Tree 部分
///     8. Properties 部分
/// 7. 许可协议
/// 8. 更新日志
/// 9. 画廊
/// 10. 荣誉名单
///
/// ## 关于
/// This is a minimal state immediate mode graphical user interface toolkit
/// written in ANSI C and licensed under public domain. It was designed as a simple
/// embeddable user interface for application and does not have any dependencies,
/// a default renderbackend or OS window and input handling but instead provides a very modular
/// library approach by using simple input state for input and draw
/// commands describing primitive shapes as output. So instead of providing a
/// layered library that tries to abstract over a number of platform and
/// render backends it only focuses on the actual UI.
///
/// ## 特色
/// 
/// - Immediate mode graphical user interface toolkit
/// - 单一头文件
/// - 使用 C89 (ANSI C) 编写
/// - 小文件 (~18kLOC)
/// - 专注于可移植性，效率和简洁
/// - 无依赖 (通过设置甚至可以不依赖标准库)
/// - 完全可定制皮肤
/// - Low memory footprint with total memory control if needed or wanted
/// - 支持 UTF-8
/// - No global or hidden state
/// - 可定制的库模块（您可以只编译和使用您所需要的）
/// - Optional font baker and vertex buffer output
/// - [中文文档](https://github/zoollcar/nuklear/doc/nuklear.html)
///
/// ## 特色
/// - Absolutely no platform dependent code
/// - Memory management control ranging from/to
///     - Ease of use by allocating everything from standard library
///     - Control every byte of memory inside the library
/// - Font handling control ranging from/to
///     - Use your own font implementation for everything
///     - Use this libraries internal font baking and handling API
/// - Drawing output control ranging from/to
///     - Simple shapes for more high level APIs which already have drawing capabilities
///     - Hardware accessible anti-aliased vertex buffer output
/// - Customizable colors and properties ranging from/to
///     - Simple changes to color by filling a simple color table
///     - Complete control with ability to use skinning to decorate widgets
/// - Bendable UI library with widget ranging from/to
///     - Basic widgets like buttons, checkboxes, slider, ...
///     - Advanced widget like abstract comboboxes, contextual menus,...
/// - Compile time configuration to only compile what you need
///     - Subset which can be used if you do not want to link or use the standard library
/// - Can be easily modified to only update on user input instead of frame updates
///
/// ## 用法
/// 这个库自包含在一个单独的头文件中，
/// 分为 仅头文件模式 和 定义模式. 默认使用的是 仅头文件模式
/// 如果要在包含头文件的同时包含定义 需要在 #include 前定义一个宏 NK_IMPLEMENTATION
/// e.g.:
/// 使用它需要在程序开头定义一个宏和引入一个头文件
/// 
/// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~C
///     #define NK_IMPLEMENTATION
///     #include "nuklear.h"
/// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
///
/// 若果要使用其他的函数或对库进行更多的控制
/// 可以定义下面的 更多标志 中列出的标志
///
/// !!! WARNING
///     每次包含nuklear时都应定义相同的编译器标志。这非常重要，否则可能会导致编译错误，甚至堆栈损坏。
///
/// ### 更多标志
/// 标志                            | 描述
/// --------------------------------|------------------------------------------
/// NK_PRIVATE                      | 所有的函数将声明为 `static`，也就是只能在本文件中使用 nuklear的函数
/// NK_INCLUDE_FIXED_TYPES          | 它将包含固定大小和类型头文件`<stdint.h>` ，而不是尝试选择正确的类型。这将可以防止编译器错误
/// NK_INCLUDE_DEFAULT_ALLOCATOR    | 它将包含头文件 `<stdlib.h>` 简化内存管理。
/// NK_INCLUDE_STANDARD_IO          | 它将包含头文件 `<stdio.h>` 并根据文件加载提供附加功能。
/// NK_INCLUDE_STANDARD_VARARGS     | 它将包含头文件 `<stdio.h>` 并根据文件加载提供附加功能。和NK_INCLUDE_STANDARD_IO一样
/// NK_INCLUDE_VERTEX_BUFFER_OUTPUT | 队列命令转换为顶点绘制命令 Defining this adds a vertex draw command list backend to this library, which allows you to convert queue commands into vertex draw commands. This is mainly if you need a hardware accessible format for OpenGL, DirectX, Vulkan, Metal,...
/// NK_INCLUDE_FONT_BAKING          | Defining this adds `stb_truetype` and `stb_rect_pack` implementation to this library and provides font baking and rendering. If you already have font handling or do not want to use this font handler you don't have to define it.
/// NK_INCLUDE_DEFAULT_FONT         | 将一个默认字体 ProggyClean.ttf 添加到这个库中，这个在没有truetype字体时使用。
/// NK_INCLUDE_COMMAND_USERDATA     | Defining this adds a userdata pointer into each command. Can be useful for example if you want to provide custom shaders depending on the used widget. Can be combined with the style structures.
/// NK_BUTTON_TRIGGER_ON_RELEASE    | 默认情况下这个库会在按钮按下时做出反应，定义这个会在按钮释放时做出反应
/// NK_ZERO_COMMAND_MEMORY          | Defining this will zero out memory for each drawing command added to a drawing queue (inside nk_command_buffer_push). Zeroing command memory is very useful for fast checking (using memcmp) if command buffers are equal and avoid drawing frames when nothing on screen has changed since previous frame.
///
/// !!! WARNING
///     以下标志会引入标准C库
///     - NK_INCLUDE_DEFAULT_ALLOCATOR
///     - NK_INCLUDE_STANDARD_IO
///     - NK_INCLUDE_STANDARD_VARARGS
///
/// !!! WARNING
///     The following flags if defined need to be defined for both header and implementation:
///     - NK_INCLUDE_FIXED_TYPES
///     - NK_INCLUDE_DEFAULT_ALLOCATOR
///     - NK_INCLUDE_STANDARD_VARARGS
///     - NK_INCLUDE_VERTEX_BUFFER_OUTPUT
///     - NK_INCLUDE_FONT_BAKING
///     - NK_INCLUDE_DEFAULT_FONT
///     - NK_INCLUDE_STANDARD_VARARGS
///     - NK_INCLUDE_COMMAND_USERDATA
///
/// ### 常量
/// 常量                          | 描述
/// --------------------------------|---------------------------------------
/// NK_BUFFER_DEFAULT_INITIAL_SIZE  | 缓冲区大小，默认是4k Initial buffer size allocated by all buffers while using the default allocator 函数s included by defining NK_INCLUDE_DEFAULT_ALLOCATOR. If you don't want to allocate the default 4k memory then redefine it.
/// NK_MAX_NUMBER_BUFFER            | float和string之间的转换缓冲区大小，默认是64
/// NK_INPUT_MAX                    | 一帧中可以添加为文本输入的最大字节数。 默认是16 
///
/// !!! WARNING
///     The following constants if defined need to be defined for both header and implementation:
///     - NK_MAX_NUMBER_BUFFER
///     - NK_BUFFER_DEFAULT_INITIAL_SIZE
///     - NK_INPUT_MAX
///
/// ### 依赖关系
///

/// 函数    | 描述
/// ------------|---------------------------------------------------------------
/// NK_ASSERT   | 默认情况下 nuklear 会使用 `<assert.h>` 中的 assert().
/// NK_MEMSET   | 您可以将它定义为 'memset' 或是您自己的版本，否则nuklear将使用它自己的版本。
/// NK_MEMCPY   | 您可以将其定义为 'memcpy' 或是您自己的版本，否则nuklear将使用它自己的版本。
/// NK_SQRT     | 您可以将其定义为 'sqrt' 或是您自己的版本，否则nuklear将使用它自己缓慢不精确的版本。
/// NK_SIN      | 您可以将其定义为 'sinf' 或是您自己的版本，否则nuklear将使用它自己的近似实现。
/// NK_COS      | 您可以将此定义为 'cosf' 或您自己的余弦函数替换，否则nuklear将使用它自己的近似实现。
/// NK_STRTOD   | 您可以将此定义为 'strtod' 或您自己的 string to double 转换函数，否则nuklear将使用它自己的不准确，可能也不安全的版本（不处理 nan 和 infinity）。
/// NK_DTOA     | 您可以将此定义为 'dtoa' 或您自己的 double to string 转换函数，否则nuklear将使用它自己的不准确，可能也不安全的版本（不处理 nan 和 infinity）。
/// NK_VSNPRINTF| 如果您定义了 `NK_INCLUDE_STANDARD_VARARGS` 或是 `NK_INCLUDE_STANDARD_IO` and want to be safe define this to `vsnprintf` on compilers supporting later versions of C or C++. By default nuklear will check for your stdlib version in C as well as compiler version in C++. if `vsnprintf` is available it will define it to `vsnprintf` directly. If not defined and if you have older versions of C or C++ it will be defined to `vsprintf` which is unsafe.
///
/// !!! WARNING
///     以下依赖项将引入标准C库：
///     - NK_ASSERT
///
/// !!! WARNING
///     The following dependencies if defined need to be defined for both header and implementation:
///     - NK_ASSERT
///
/// !!! WARNING
///     The following dependencies if defined need to be defined only for the implementation part:
///     - NK_MEMSET
///     - NK_MEMCPY
///     - NK_SQRT
///     - NK_SIN
///     - NK_COS
///     - NK_STRTOD
///     - NK_DTOA
///     - NK_VSNPRINTF
///
/// ## Example 例子
/// 
/// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// // 初始化 gui 状态
/// enum {EASY, HARD};
/// static int op = EASY;
/// static float value = 0.6f;
/// static int i =  20;
/// struct nk_context ctx;
///
/// nk_init_fixed(&ctx, calloc(1, MAX_MEMORY), MAX_MEMORY, &font);
/// if (nk_begin(&ctx, "Show", nk_rect(50, 50, 220, 220),
///     NK_WINDOW_BORDER|NK_WINDOW_MOVABLE|NK_WINDOW_CLOSABLE)) {
///     // 固定小部件像素宽度
///     nk_layout_row_static(&ctx, 30, 80, 1);
///     if (nk_button_label(&ctx, "button")) {
///         // event handling
///     }
///
///     // 固定小部件宽高比
///     nk_layout_row_dynamic(&ctx, 30, 2);
///     if (nk_option_label(&ctx, "easy", op == EASY)) op = EASY;
///     if (nk_option_label(&ctx, "hard", op == HARD)) op = HARD;
///
///     // 自定义小部件像素宽度
///     nk_layout_row_begin(&ctx, NK_STATIC, 30, 2);
///     {
///         nk_layout_row_push(&ctx, 50);
///         nk_label(&ctx, "Volume:", NK_TEXT_LEFT);
///         nk_layout_row_push(&ctx, 110);
///         nk_slider_float(&ctx, 0, &value, 1.0f, 0.1f);
///     }
///     nk_layout_row_end(&ctx);
/// }
/// nk_end(&ctx);
/// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
///
/// ![](https://cloud.githubusercontent.com/assets/8057201/10187981/584ecd68-675c-11e5-897c-822ef534a876.png)
///
/// ## API
///